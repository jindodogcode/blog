openapi: 3.0.0
info:
  description: This is a simple blog server.
  version: "1.0.0"
  title: Blog
  contact:
    email: michaeljkennedy@protonmail.com
servers:
  - url: "/api/v1"
tags:
  - name: user
    description: User routes
  - name: post
    description: Post routes
  - name: reply
    description: Reply routes
paths:
  /login:
    description: >
      Login portal
    get:
      summary: Login
      operationId: login
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /logout:
    description: >
      Logout portal
    get:
      summary: Logout
      operationId: logout
      responses:
        '204':
          description: Logout successful
  /users:
    description: >
      This resource represents the collection of users.
    post:
      tags:
        - user
      summary: Creates a new user
      operationId: addUser
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: Create a new user
        required: true
  /users/{username}:
    description: >
      This resource represents an individual user.
      Each user is identified by their username.
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - user
      summary: Retreives user information
      operationId: getUser
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    patch:
      tags:
        - user
      summary: Updates user
      operationId: updateUser
      security:
        - basicAuth: []      
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized to update this content
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to update this content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Username not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
        description: Create a new user
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      operationId: deleteUser
      security:
        - basicAuth: []
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized to delete this user
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to delete this user
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Username not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /users/{username}/posts:
    description: Represents the collection of post by a specific user
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - user
        - post
      summary: Create a new post
      operationId: addUserPost
      security:
        - basicAuth: []
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation error
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized to post as this user
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to post as this user
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
        required: true
        description: Object representing a new post
    get:
      tags:
        - user
        - post
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreive posts by the user specified
      operationId: getUserPosts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: User not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /users/{username}/posts/{id}:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a specific post by a specific user
    patch:
      tags:
        - user
        - post
      summary: Update post
      operationId: updateUserPost
      security:
        - basicAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Validation error
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized to update post
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to update post
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Post not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePost'
        required: true
        description: Object representing the fields to update in the post
  /users/{username}/replies:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
    description: Represents the collection of replies by a specific user
    post:
      tags:
        - user
        - reply
      summary: Create a new reply
      operationId: addUserReply
      security:
        - basicAuth: []
      responses:
        '201':
          description: Reply created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '400':
          description: Validation error
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized to create reply
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to create reply
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReply'
        required: true
        description: Object representing a new reply
    get:
      tags:
        - user
        - reply
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreive replies by specific user
      operationId: getUserReplies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
        '404':
          description: User not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /users/{username}/replies/{id}:
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a specific reply by a specific user
    patch:
      tags:
        - user
        - reply
      summary: Updates a specific reply
      operationId: updateUserReply
      security:
        - basicAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '400':
          description: Validation error
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '401':
          description: Unauthorized to update reply
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '403':
          description: Forbidden to update reply
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Reply id not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReply'
        required: true
        description: Object containing the fields to update a reply
  /posts:
    description: Represents a collection of posts
    get:
      tags:
        - post
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreives posts
      operationId: getPosts
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a specific post
    get:
      tags:
        - post
      summary: Retreives a specific post
      operationId: getPost
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /posts/{id}/replies:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a collection of replies
    get:
      tags:
        - post
        - reply
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreive replies
      operationId: getPostReplies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Post not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /replies:
    description: Represents a collection of replies
    get:
      tags:
        - reply
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreves replies
      operationId: getReplies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
  /replies/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a specific reply
    get:
      tags:
        - reply
      summary: Retreive a specific reply
      operationId: getReply
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        '404':
          description: Reply not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /replies/{id}/replies:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    description: Represents a collections of replies to a specific reply 
    get:
      tags:
        - reply
        - post
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
        - name: pagesize
          in: query
          required: false
          schema:
            type: integer
      summary: Retreives replies
      operationId: getReplyReplies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
        '404':
          description: Reply not found
          content:
            applicaton/json:
              schema:
                $ref: '#/components/schemas/ApiError'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        created:
          type: string
          format: date-time
        lastLoggedIn:
          type: string
          format: date-time
    NewUser:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
          format: password
    UpdateUser:
      type: object
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        created:
          type: string
          format: date-time
        edited:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
    NewPost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    UpdatePost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        created:
          type: string
          format: date-time
        edited:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        postId:
          type: integer
          format: int64
        replyId:
          type: integer
          format: int64
    NewReply:
      type: object
      properties:
        content:
          type: string
        postId:
          type: integer
          format: int64
        replyId:
          type: integer
          format: int64
    UpdateReply:
      type: object
      properties:
        content:
          type: string
    ApiError:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        debugMessage:
          type: string
        subErrors:
          type: array
          items:
            $ref: '#/components/schemas/SubError'
    SubError:
      type: object
      properties:
        object:
          type: string
        field:
          type: string
        rejectedValue:
          type: object
        message:
          type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
