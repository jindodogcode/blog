openapi: 3.0.0
info:
  title: "Blog schema"
  version: "1.0.0"
  contact:
    email: "michaeljkennedy@protonmail.com"
servers:
  - description: "Main server"
    url: http://localhost:8080
tags:
  - name: users
    description: "Operations about users"
  - name: posts
    description: "Operations about blog posts"
paths:
  /users:
    post:
      tags:
        - users
      summary: Add a new user
      operationId: addUser
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Problem with request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Username or email already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/User"
        required: true
  /users/{id}:
    parameters:
      - name: id
        in: path
        description: The uuid of the user to get.
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - users
      summary: Get user by id
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - users
      summary: Update a user
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Problem with the request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Must have credentials to update a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Client does not have access to this operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/requestBodies/User"
        required: true
    delete:
      tags:
        - users
      summary: Delete a user
      responses:
        "200":
          description: User deleted
        "401":
          description: Must have credentials to update a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Client does not have access to this operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        created:
          type: string
          format: date-time
        lastLoggedIn:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        created:
          type: string
          format: date-time
        edited:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        created:
          type: string
          format: date-time
        edited:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        postId:
          type: integer
          format: int64
        replyId:
          type: integer
          format: int64
    MediaContent:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uri:
          type: string
          format: uri
        uploaded:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          format: int32
        error:
          type: string
        message:
          type: string
        path:
          type: string
  requestBodies:
    User:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              username:
                type: string
              firstName:
                type: string
              lastName:
                type: string
      description: New User object to be added to the database
    Post:
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string
              userId:
                type: string
                format: uuid
      description: New Post object to be added to the database
    Reply:
      content:
        application/json:
          schema:
            type: object
            properties:
              content:
                type: string
              userId:
                type: string
                format: uuid
              postId:
                type: integer
                format: int64
      description: New Reply object to be added to the database
